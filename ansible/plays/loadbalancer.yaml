---
## Description
# Setup haproxy loadbalancer cluster with high aviability (keepalived)

## Command
# ansible-playbook -i hosts plays/play-loadbalancer.yml --private-key=../.ssh/id_rsa_loadbalancer

- name: Setup haproxy loadbalancer cluster with high aviability (keepalived)
  hosts: masters
  remote_user: ubuntu

  vars:
    - inventory_groupname: masters

  roles:
    - role: keepalived

  tasks:
    - name: Add keepalived.conf for master
      become: true
      blockinfile:
        path: /etc/keepalived/keepalived.conf
        block: |
          # Global Settings for notifications

          # Define the script used to check if haproxy is still working
          vrrp_script chk_haproxy { 
              script "/usr/bin/killall -0 haproxy"
              interval 2 
              weight 2 
          }

          # Define the script used to check if nginx is still working
          vrrp_script chk_nginx { 
              script "/usr/bin/killall -0 nginx"
              interval 2 
              weight 2 
          }

          # Configuration for Virtual Interface
          vrrp_instance LB_VIP {
              interface {{ interface_virtual_ips }}
              state MASTER                          # set to BACKUP on the peer machine
              priority 101                          # set to 99 on the peer machine
              virtual_router_id 51
            
              authentication {
                  auth_type AH
                  auth_pass myP@ssword              # Password for accessing vrrpd. Same on all devices
              }
              unicast_src_ip {{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}           # Private IP address of master
              unicast_peer {                        # Private IP address of the backup haproxy
              {% for item in groups[inventory_groupname] | difference([inventory_hostname]) %}
              {{ hostvars[item].ansible_eth0.ipv4.address }}
              {% endfor %}
              }
            
              # The virtual ip address shared between the two loadbalancers
              virtual_ipaddress {
                  {{ virtual_ip }}
              }
              
              # Use the Defined Script to Check whether to initiate a fail over
              track_script {
                  chk_haproxy
              }
          } 
        state: present
      when: inventory_hostname == groups[inventory_groupname][0]

    - name: Add keepalived.conf for backup
      become: true
      blockinfile:
        path: /etc/keepalived/keepalived.conf
        block: |
          # Global Settings for notifications

          # Define the script used to check if haproxy is still working
          vrrp_script chk_haproxy { 
              script "/usr/bin/killall -0 haproxy"
              interval 2 
              weight 2 
          }

          # Define the script used to check if nginx is still working
          vrrp_script chk_nginx { 
              script "/usr/bin/killall -0 nginx"
              interval 2 
              weight 2 
          }
            
          # Configuration for Virtual Interface
          vrrp_instance LB_VIP {
              interface {{ interface_virtual_ips }}
              state BACKUP                          # set to BACKUP on the peer machine
              priority 100                          # set to 99 on the peer machine
              virtual_router_id 51
            
              authentication {
                  auth_type AH
                  auth_pass myP@ssword              # Password for accessing vrrpd. Same on all devices
              }
              unicast_src_ip {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}           # Private IP address of backup
              unicast_peer {                        # Private IP address of the backup haproxy
              {% for item in groups[inventory_groupname] | difference([inventory_hostname]) %}
              {{ hostvars[item].ansible_eth0.ipv4.address }}
              {% endfor %}
              }
            
              # The virtual ip address shared between the two loadbalancers
              virtual_ipaddress {
                  {{ virtual_ip }}
              }
              
              # Use the Defined Script to Check whether to initiate a fail over
              track_script {
                  chk_haproxy
              }
          } 
        state: present
      when: inventory_hostname != groups[inventory_groupname][0]

    - name: Enable keepalived
      become: true
      service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - keepalived